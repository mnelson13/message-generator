{"version":3,"sources":["components/MessageCard/MessageCard.js","components/FormOptions/FormOptions.js","components/TemplateForm/TemplateForm.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["MessageCard","props","react_default","a","createElement","className","id","message","onClick","send","FormOptions","value","TemplateForm","onChange","handleInputChange","name","type","htmlFor","save","Form","Object","classCallCheck","this","components_FormOptions_FormOptions","key","Wrapper","state","templates","guests","companies","greeting","guestName","guestInfo","hotel","room","messageId","newTemplate","setGreeting","currentTime","moment","format","_this","setState","handleHotelChange","event","index","target","company","handleGuestChange","firstName","reservation","roomNumber","window","$","modal","length","body","console","log","toConsumableArray","concat","_event$target","defineProperty","elems","document","querySelectorAll","M","FormSelect","init","Modal","_this2","src","alt","lib","header","disabled","selected","map","buildForm","guest","lastName","components_MessageCard_MessageCard","replace","components_TemplateForm_TemplateForm","React","Component","App","components_Wrapper_Wrapper","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.063fd47f.chunk.js","sourcesContent":["import React from 'react';\nimport './MessageCard.css';\n\nconst MessageCard = props => (\n    <div className=\"message z-depth-4\">\n        <h5>Message #{props.id}</h5>\n        <p>{props.message}</p>\n        <button className=\"btn waves-effect waves-light blue darken-4\" onClick={() => props.send(props.id)}>Send\n            <i className=\"material-icons right\">send</i>\n        </button>  \n    </div>\n);\n\nexport default MessageCard;","import React from 'react';\n\nconst FormOptions = props => (\n\n    <option value={props.id}>{props.value}</option>\n\n);\n\nexport default FormOptions;","import React from 'react';\nimport \"./TemplateForm.css\"\n\nconst TemplateForm = props => (\n    <div className=\" templateForm z-depth-4\"> \n        <form>\n            <h5>Add a new message template:</h5>\n            <p>To customize your template, use {'{'}greeting{'}'}, {'{'}guest{'}'}, {'{'}hotel{'}'}, and/or {'{'}room{'}'} as placeholders to add their corresponding values.</p>\n            <div className=\"row\">\n                <div className=\"input-field col s12\">\n                <textarea \n                id=\"templateText\" \n                className=\"materialize-textarea\"\n                onChange={props.handleInputChange}\n                value={props.value}\n                name=\"newTemplate\"\n                type=\"text\">\n                </textarea>\n                <label htmlFor=\"templateText\">Textarea</label>\n                </div>\n            </div>\n        </form>\n        <button onClick={props.save} className=\"btn waves-effect waves-light blue darken-4\">Submit\n            <i className=\"material-icons right\">send</i>\n        </button>\n    </div>\n);\n\nexport default TemplateForm;","import React from 'react';\nimport './Wrapper.css';\nimport templates from '../../templates.json';\nimport guests from '../../guests.json';\nimport companies from '../../companies.json'\nimport MessageCard from '../MessageCard';\nimport FormOptions from '../FormOptions';\nimport TemplateForm from '../TemplateForm';\nimport M from \"materialize-css/dist/js/materialize.min.js\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { Modal } from 'react-materialize';\nimport moment from 'moment';\n\n\nclass Form {\n    constructor(id, value){\n        this.id = id;\n        this.value = value;\n    }\n    buildForm(){\n        return (\n            <FormOptions\n            key={this.id}\n            id={this.id}\n            value={this.value}\n            />\n        )\n    }\n}\n\n\nclass Wrapper extends React.Component {\n\n    state = {\n        templates: templates,\n        guests: guests,\n        companies: companies,\n        greeting: \"\",\n        guestName: \"\",\n        guestInfo: \"\",\n        hotel: \"\",\n        room: \"\", \n        messageId: \"\",\n        newTemplate: \"\"\n    }\n    \n    componentDidMount(){\n        var elems = document.querySelectorAll('select');\n        var instances = M.FormSelect.init(elems);\n        var elems = document.querySelectorAll('.modal');\n        var instances = M.Modal.init(elems);\n        this.setGreeting();\n    }\n\n    setGreeting = () => {\n        var currentTime = moment().format(\"HH\");\n\n        if(currentTime < 12 ) {\n            this.setState({ greeting: \"Good morning\"})\n        } else if (currentTime >= 12 && currentTime < 18) {\n            this.setState({ greeting: \"Good afternoon\"})\n        } else if (currentTime >= 18) {\n            this.setState({ greeting: \"Good evening\"})\n        }\n    }\n\n    handleHotelChange = event => {\n        var index=event.target.value -1\n        this.setState({\n            hotel: companies[index].company\n        })\n    }\n\n    handleGuestChange = event => {\n        var index=event.target.value -1\n        this.setState({\n            guestInfo: guests[index],\n            guestName: guests[index].firstName,\n            room: guests[index].reservation.roomNumber\n        })\n    }\n    \n\n    send = (id) => {\n        this.setState({\n            messageId: id\n        }, () => {\n        var modal = window.$(\"#sendModal\");\n        modal.modal('open')\n        })\n    }\n\n    save = () => {\n        var id = this.state.templates.length +1\n        var body = this.state.newTemplate\n        var newTemplate = {\n            \"id\": id,\n            \"body\": body\n        }\n        console.log(newTemplate)\n        this.setState({ templates: [...this.state.templates, newTemplate], newTemplate: \"\"})\n        \n    }\n\n    handleInputChange = event => {\n        const { name, value } = event.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    render(){\n        return (\n            \n            <div className=\"container\">\n                <img src=\"https://www.innatlagunabeach.com/wp-content/uploads/2013/12/banner-room.jpg\" alt=\"hotel banner\" className=\"z-depth-4\"></img>\n                <div>\n                    <Modal\n                        id=\"sendModal\"\n                        header='Sent!'>\n                        <p>Message #{this.state.messageId} has been sent to {this.state.guestName}!</p>\n                    </Modal>\n                </div>\n\n                <div className=\"row\">\n\n                    <div className=\"input-field col s6\">\n                        <select onChange={this.handleHotelChange}>\n                        <option value=\"\" disabled selected>Choose your hotel</option>\n                            {this.state.companies.map(company => (\n                                new Form(company.id, company.company).buildForm()\n                            ))}\n                        </select>\n                        <label>Hotels</label>\n                    </div>\n\n                    <div className=\"input-field col s6\">\n                        <select onChange={this.handleGuestChange}>\n                        <option value=\"\" disabled selected>Choose your guest</option>\n                            {this.state.guests.map(guest => (\n                                new Form(guest.id, guest.firstName + \" \" + guest.lastName).buildForm()\n                            ))}\n                        </select>\n                        <label>Guests</label>\n                    </div>\n\n                </div>\n\n                <div>\n                    {this.state.guestName !== \"\" && this.state.hotel !== \"\" ? (\n                        this.state.templates.map(message => (\n                            <MessageCard\n                            key={message.id}\n                            id={message.id}\n                            send={this.send}\n                            message={\n                                message.body\n                                .replace('{greeting}', this.state.greeting)\n                                .replace('{guest}', this.state.guestName)\n                                .replace('{hotel}', this.state.hotel)\n                                .replace('{room}', this.state.room)}\n                            />\n                        ))\n                    ): \"\"}\n                </div>\n                <div>\n                {this.state.guestName !== \"\" && this.state.hotel !== \"\" ? (\n                <TemplateForm\n                    handleInputChange={this.handleInputChange}\n                    value={this.state.newTemplate}\n                    save={this.save}\n                />\n                ): \"\"}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Wrapper;","import React from 'react';\nimport Wrapper from './components/Wrapper'\nimport './App.css';\n\nconst App = () => <Wrapper/>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}